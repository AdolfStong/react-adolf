{"version":3,"sources":["serviceWorker.js","components/Header/Header.js","components/Table/Table.js","components/Form/Form.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","Theader","Tbody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","Table","Form","handleChange","event","target","value","setState","submitForm","handleSubmit","state","initialState","this","htmlFor","type","id","onChange","React","Component","App","characters","filter","character","i","className","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8CCRS,SAASC,IACpB,OACI,uCCFR,IAAMC,EAAU,WACd,OACE,+BACE,4BACE,oCACA,sCAMFC,EAAQ,SAAAC,GACZ,IAAMC,EAAOD,EAAME,cAAcC,KAAI,SAACC,EAAKC,GACzC,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAIG,MACT,4BAAKH,EAAII,KACT,4BACE,4BAAQC,QAAS,kBAAMT,EAAMU,gBAAgBL,KAA7C,eAKR,OAAO,+BAAQJ,IAyBFU,EAVD,SAACX,GAAW,IAChBE,EAAmCF,EAAnCE,cAAeQ,EAAoBV,EAApBU,gBACvB,OACE,+BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOR,cAAiBA,EAAeQ,gBAAiBA,M,OCI/CE,E,YA9CX,WAAaZ,GAAQ,IAAD,8BAChB,4CAAMA,KASVa,aAAe,SAAAC,GAAU,IAAD,EACIA,EAAMC,OAAtBR,EADY,EACZA,KAAMS,EADM,EACNA,MAEd,EAAKC,SAAL,eACKV,EAAOS,KAdI,EAiBpBE,WAAa,WACT,EAAKlB,MAAMmB,aAAa,EAAKC,OAC7B,EAAKH,SAAS,EAAKI,eAhBnB,EAAKA,aAAe,CAChBd,KAAM,GACNC,IAAK,IAGT,EAAKY,MAAQ,EAAKC,aARF,E,sEAqBV,IAAD,EACiBC,KAAKF,MAAnBb,EADH,EACGA,KAAMC,EADT,EACSA,IAEd,OACE,8BACE,2BAAOe,QAAQ,QAAf,QACA,2BACEC,KAAK,OACLjB,KAAK,OACLkB,GAAG,OACHT,MAAOT,EACPmB,SAAUJ,KAAKT,eACjB,2BAAOU,QAAQ,OAAf,OACA,2BACEC,KAAK,OACLjB,KAAK,MACLkB,GAAG,MACHT,MAAOR,EACPkB,SAAUJ,KAAKT,eACjB,2BAAOW,KAAK,SAASR,MAAM,SAASP,QAASa,KAAKJ,kB,GAzC3CS,IAAMC,WCmDVC,G,iNA9CbT,MAAQ,CACNU,WAAY,CACV,CACEvB,KAAM,UACNC,IAAK,WAEP,CACED,KAAM,MACNC,IAAK,WAEP,CACED,KAAM,MACNC,IAAK,mBAEP,CACED,KAAM,SACNC,IAAK,e,EAIXE,gBAAkB,SAAAL,GAAU,IAClByB,EAAe,EAAKV,MAApBU,WAER,EAAKb,SAAS,CACZa,WAAYA,EAAWC,QAAO,SAACC,EAAWC,GACxC,OAAO5B,IAAU4B,Q,EAIvBd,aAAe,SAAAa,GACb,EAAKf,SAAS,CACVa,WAAW,GAAD,mBAAM,EAAKV,MAAMU,YAAjB,CAA6BE,O,wEAGnC,IACDF,EAAeR,KAAKF,MAApBU,WACP,OACE,yBAAKI,UAAU,iBACb,kBAACrC,EAAD,MACA,kBAAC,EAAD,CAAOK,cAAiB4B,EAAYpB,gBAAiBY,KAAKZ,kBAC1D,kBAAC,EAAD,CAAMS,aAAcG,KAAKH,oB,GAzCfQ,IAAMC,YCExBO,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SLmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0d759b45.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/*\n * @Descripttion: \n * @version: \n * @Author: shentong\n * @Date: 2020-02-28 16:34:21\n * @LastEditors  : shentong\n * @LastEditTime : 2020-02-28 18:42:35\n */\nimport React from 'react'\n\nexport default function Header () {\n    return (\n        <h1>headers</h1>\n    )\n}\n","/*\n * @Descripttion: \n * @version: \n * @Author: shentong\n * @Date: 2020-02-28 18:12:34\n * @LastEditors: shentong\n * @LastEditTime: 2020-03-03 15:11:04\n */\nimport React from 'react'\n\nconst Theader = () => {\n  return (\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Job</th>\n      </tr>\n    </thead>\n  )\n}\n\nconst Tbody = props => {\n  const rows = props.characterData.map((row, index) => {\n    return (\n      <tr key={index}>\n        <td>{row.name}</td>\n        <td>{row.job}</td>\n        <td>\n          <button onClick={() => props.removeCharacter(index)}>delete</button>\n        </td>\n      </tr>\n    )\n  })\n  return <tbody>{rows}</tbody>\n}\n\n// class Table extends React.Component {\n//   render () {\n//     const { characterData } = this.props\n//     return (\n//       <table>\n//           <Theader/>\n//           <Tbody characterData = {characterData}/>\n//       </table>\n//     )\n//   }\n// }\n\nconst Table = (props) => {\n  const { characterData, removeCharacter } = props\n  return (\n    <table>\n      <Theader/>\n      <Tbody characterData = {characterData} removeCharacter={removeCharacter}/>\n    </table>\n  )\n}\n\nexport default Table","/*\n * @Descripttion: \n * @version: \n * @Author: shentong\n * @Date: 2020-02-29 14:36:33\n * @LastEditors: shentong\n * @LastEditTime: 2020-02-29 17:22:48\n */\nimport React from 'react'\n\nclass Form extends React.Component {\n    constructor (props) {\n        super(props)\n        \n        this.initialState = {\n            name: '',\n            job: '',\n        }\n\n        this.state = this.initialState\n    }\n    handleChange = event => {\n        const { name, value } = event.target\n\n        this.setState({\n            [name]: value\n        })\n    }\n    submitForm = () => {\n        this.props.handleSubmit(this.state)\n        this.setState(this.initialState)\n    }\n    render() {\n        const { name, job } = this.state;\n      \n        return (\n          <form>\n            <label htmlFor=\"name\">Name</label>\n            <input\n              type=\"text\"\n              name=\"name\"\n              id=\"name\"\n              value={name}\n              onChange={this.handleChange} />\n            <label htmlFor=\"job\">Job</label>\n            <input\n              type=\"text\"\n              name=\"job\"\n              id=\"job\"\n              value={job}\n              onChange={this.handleChange} />\n            <input type=\"button\" value=\"Submit\" onClick={this.submitForm}/>\n          </form>\n        );\n    }\n}\n\nexport default Form;","/*\n * @Descripttion: \n * @version: \n * @Author: shentong\n * @Date: 2020-02-27 18:57:03\n * @LastEditors: shentong\n * @LastEditTime: 2020-03-03 17:37:28\n */\nimport React from 'react';\nimport Header from './components/Header/Header'\nimport Table from './components/Table/Table'\nimport Form from './components/Form/Form'\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    characters: [\n      {\n        name: 'Charlie',\n        job: 'Janitor',\n      },\n      {\n        name: 'Mac',\n        job: 'Bouncer',\n      },\n      {\n        name: 'Dee',\n        job: 'Aspring actress',\n      },\n      {\n        name: 'Dennis',\n        job: 'Bartender',\n      }\n    ]\n  }\n  removeCharacter = index => {\n    const { characters } = this.state\n  \n    this.setState({\n      characters: characters.filter((character, i) => {\n        return index !== i\n      })\n    })\n  }\n  handleSubmit = character => {\n    this.setState({\n        characters: [...this.state.characters, character]\n    })\n  }\n  render() {\n    const {characters} =  this.state\n    return (\n      <div className=\"App container\">\n        <Header/>\n        <Table characterData = {characters} removeCharacter={this.removeCharacter}/>\n        <Form handleSubmit={this.handleSubmit}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","/*\n * @Descripttion: \n * @version: \n * @Author: shentong\n * @Date: 2020-02-27 18:57:03\n * @LastEditors  : shentong\n * @LastEditTime : 2020-02-28 18:10:40\n */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}